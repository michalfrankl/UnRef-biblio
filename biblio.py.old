#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 28 22:15:20 2020

@author: Michal Frankl, frankl@mua.cas.cz
"""

import streamlit as st
import pandas as pd
import numpy as np
from pyzotero import zotero
from matplotlib import pyplot as plt
import zotero_config as zc
import altair as alt

# -------------------------------------------------------------
# FUNCTIONS

@st.cache
def fetch_zotero():
    # Zotero UnRef bibliography
    zot = zotero.Zotero(zc.zotid, zc.zottype, zc.zotkey)
    
    zot.add_parameters(itemType='journalArticle || bookSection || book || thesis || webpage || blogPost || film || magazineArticle || document', sort='date', direction='asc')
    
    items = zot.everything(zot.collection_items('3UXBKWPF'))
    return(items)
    
def getBibDesc(i):
    desc = ""
    if 'creatorSummary' in i['meta']:
        desc = i['meta']['creatorSummary'] + ': '
    if 'title' in i['data']:
        if desc:
            desc = desc + i['data']['title']
        else:
            desc = i['data']['title']
    return desc.escape()

def getBibYear(i):
    if 'parsedDate' in i['meta']:
        y = i['meta']['parsedDate'][0:4]
        return y
    
def getBibCountryRow(i):
    found_countries = []
    bibRow = []
    if 'tags' in i['data']:
        # print(len(i['data']['tags']))
        if len(i['data']['tags']) > 0 : # check that the tags list isn't empty
            for t in i['data']['tags']: # loop attaching tags to countries
                if t['tag'] in countries:
                    c = t['tag'] # set country for one or more rows
                    found_countries.append(c)
                    for tag in i['data']['tags']:
                        if tag['tag'] not in countries:
                            bibRow.append(i['key'])
                            bibRow.append(getBibYear(i))
                            bibRow.append(c)
                            bibRow.append(tag['tag'])
                            print(i['key'] + ': ')
                            print(len(bibRow))                            
                            return(bibRow)
                    del c
            # fallback loop for cases with no countries
            if not found_countries:
                for tag in i['data']['tags']:
                    bibRow.append(i['key'])
                    bibRow.append(getBibYear(i))
                    bibRow.append('Not defined')
                    bibRow.append(tag['tag'])
                    return(bibRow)

def getBibCountryRows(items):
    d = []
    found_countries = []
    bibRow = []
    for i in items:
        if 'tags' in i['data']:
            # print(len(i['data']['tags']))
            if len(i['data']['tags']) > 0 : # check that the tags list isn't empty
                for t in i['data']['tags']: # loop attaching tags to countries
                    if t['tag'] in countries:
                        c = t['tag'] # set country for one or more rows
                        found_countries.append(c)
                        for tag in i['data']['tags']:
                            if tag['tag'] not in countries:
                                bibRow.append(i['key'])
                                bibRow.append(getBibYear(i))
                                bibRow.append(c)
                                bibRow.append(tag['tag'])
                                # print(i['key'] + ': ')
                                d.append(bibRow) 
                        del c
                # fallback loop for cases with no countries
                if not found_countries:
                    for tag in i['data']['tags']:
                        bibRow.append(i['key'])
                        bibRow.append(getBibYear(i))
                        bibRow.append('Not defined')
                        bibRow.append(tag['tag'])
                        d.append(bibRow) 
    return(d)                 

# -------------------------------------------------------------
# LOAD AND PREPARE DATA
                    
# data_load_state = st.text('Loading data from UnRef Zotero...')
items = fetch_zotero()
# data_load_state.text("Done! (using st.cache)")
# st.write(items)

countries = ['Czechoslovakia', 'Poland', 'Austria', 'Hungary', 'Yugoslavia']
#d = []
#for i in items:
#    if len(i['data']['tags']) > 0 :
#        dline = getBibCountryRow(i)
#        if len(dline) == 4:
#            d.append(getBibCountryRow(i))

d = getBibCountryRows(items)

#print(d)
data = np.array(d, dtype="object")
st.write(data)

# convert to dict
#dd = dict()
# for dline in d:
#	print(dline)
#    dd['zotero_key'] = dline[0]
#    dd['publication_year'] = dline[1]
#    dd['country'] = dline[2]
#    dd['tag'] = dline[3]

#print(dd)

st.write(d)

#bibdf = pd.DataFrame([d]).T
#bibdf.columns = ['zotero_key', 'publication_year', 'country', 'tag']

#bibdf = pd.DataFrame.from_records(d, columns=['zotero_key', 'publication_year', 'country', 'tag'])

#, columns=['zotero_key', 'publication_year', 'country', 'tag'] 

# bibdf = pd.DataFrame(np.array(d), columns=['zotero_key', 'publication_year', 'country', 'tag'])
bibdf = pd.DataFrame(d, columns=['zotero_key', 'publication_year', 'country', 'tag']) 
st.write(bibdf)
#
# -----------------------------------------------------------
# DISPLAY DATA AND CHARTS

st.sidebar.title('Historiography on refugees to East-Central Europe')
st.sidebar.text(f"Items total: {len(items)}")

section = st.sidebar.selectbox('Sections', ('General', 'Country comparison', 'Tags'))

if (section == 'General'): 
    
    # stat per country
    if st.sidebar.checkbox("Show records per country", 1):
        cstat = bibdf.value_counts(subset=['country'])
        cstat = cstat.reset_index()
        cstat.columns = ['Country', 'Number of records']
        st.subheader("Records per country")
        st.write(cstat)
        
        c = alt.Chart(cstat).mark_bar().encode(x='Country', y='Number of records', size='Number of records', color='Number of records')
        st.altair_chart(c, use_container_width=True)
    
    # stat per tag
    if st.sidebar.checkbox("Show records per tag", 1):
        tstat = bibdf.value_counts(subset=['tag'])
        tstat = tstat.reset_index()
        tstat.columns = ['Tag', 'Number of records']
        st.subheader("Records per tag")
        st.write(tstat)

if (section == 'Country comparison'):
    
    #if st.sidebar.checkbox("Show boxplot chart", 1):
    #    st.subheader('Boxplot chart')
    #    bibdf['publication_year'] = pd.to_numeric(bibdf['publication_year'])
    #    bibc = bibdf[bibdf['country'].isin(countries)]
    #    bibc.boxplot(column='publication_year', by='country')
    #    st.pyplot()
    
    countries = st.sidebar.multiselect("Select countries", countries, countries)
        
    for c in countries:
        cbib = bibdf[(bibdf.country == c)].value_counts(subset=['publication_year'], sort=False).reset_index()
        cbib.columns = ['Publication year', 'Number per year']
        st.subheader(c)
        c = alt.Chart(cbib).mark_bar().encode(x='Publication year', y='Number per year', size='Number per year', color='Number per year')
        st.altair_chart(c, use_container_width=True)
        
#    if st.sidebar.checkbox("Show scatter chart", 1):
#        #st.subheader('Scatter chart')
#        bibdf[bibdf['country'].isin(countries)].plot(kind="scatter", y="publication_year", x="country", title="Refugee bibliography per country (scatter)")
#        st.pyplot()
    
        
if (section == 'Tags'):

    # country, tags
    if st.sidebar.checkbox("Show records per country, tag", 1):
        ctags = bibdf.groupby(['country','tag']).zotero_key.nunique()
        ctags = ctags.reset_index()
        ctags.columns = ['Country', 'Tag', 'Number of records']
        st.subheader("Records per country, tag")
        st.write(ctags)
        
    # items with no tags
    if st.sidebar.checkbox("Show records without tags", 1):
        st.subheader("Records without tags")
        for i2 in items:
            if len(i2['data']['tags']) == 0:
                print(i2)
                st.write("[" + i2['data']['title'] + "](https://www.zotero.org/groups/2363703/unlikely_refuge/collections/3UXBKWPF/items/" + i2['data']['key'] + "/collection)")
   	
